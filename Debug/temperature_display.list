
temperature_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08002b84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08002b84  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109cd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdb  00000000  00000000  00030a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  000329e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  000338d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001036a  00000000  00000000  00034708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e0a  00000000  00000000  00044a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065092  00000000  00000000  0005687c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bb90e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036bc  00000000  00000000  000bb964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b20 	.word	0x08002b20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002b20 	.word	0x08002b20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb7a 	bl	800091c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80b 	bl	8000242 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f95e 	bl	80004ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f92c 	bl	800048c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000234:	f000 f8c8 	bl	80003c8 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000238:	f000 f906 	bl	8000448 <MX_TIM6_Init>
  MX_ADC_Init();
 800023c:	f000 f868 	bl	8000310 <MX_ADC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x20>

08000242 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000242:	b590      	push	{r4, r7, lr}
 8000244:	b095      	sub	sp, #84	; 0x54
 8000246:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000248:	2420      	movs	r4, #32
 800024a:	193b      	adds	r3, r7, r4
 800024c:	0018      	movs	r0, r3
 800024e:	2330      	movs	r3, #48	; 0x30
 8000250:	001a      	movs	r2, r3
 8000252:	2100      	movs	r1, #0
 8000254:	f002 fc5c 	bl	8002b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	2310      	movs	r3, #16
 800025a:	18fb      	adds	r3, r7, r3
 800025c:	0018      	movs	r0, r3
 800025e:	2310      	movs	r3, #16
 8000260:	001a      	movs	r2, r3
 8000262:	2100      	movs	r1, #0
 8000264:	f002 fc54 	bl	8002b10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	003b      	movs	r3, r7
 800026a:	0018      	movs	r0, r3
 800026c:	2310      	movs	r3, #16
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 fc4d 	bl	8002b10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000276:	0021      	movs	r1, r4
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2212      	movs	r2, #18
 800027c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2201      	movs	r2, #1
 8000282:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2201      	movs	r2, #1
 8000288:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2210      	movs	r2, #16
 800028e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2210      	movs	r2, #16
 8000294:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2202      	movs	r2, #2
 800029a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	22a0      	movs	r2, #160	; 0xa0
 80002a6:	0392      	lsls	r2, r2, #14
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2200      	movs	r2, #0
 80002ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 f966 	bl	8001584 <HAL_RCC_OscConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002bc:	f000 f9aa 	bl	8000614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	2110      	movs	r1, #16
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2207      	movs	r2, #7
 80002c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2202      	movs	r2, #2
 80002cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2101      	movs	r1, #1
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 fc6a 	bl	8001bb8 <HAL_RCC_ClockConfig>
 80002e4:	1e03      	subs	r3, r0, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002e8:	f000 f994 	bl	8000614 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002ec:	003b      	movs	r3, r7
 80002ee:	2220      	movs	r2, #32
 80002f0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002f2:	003b      	movs	r3, r7
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f8:	003b      	movs	r3, r7
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 fdae 	bl	8001e5c <HAL_RCCEx_PeriphCLKConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000304:	f000 f986 	bl	8000614 <Error_Handler>
  }
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b015      	add	sp, #84	; 0x54
 800030e:	bd90      	pop	{r4, r7, pc}

08000310 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	0018      	movs	r0, r3
 800031a:	230c      	movs	r3, #12
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f002 fbf6 	bl	8002b10 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <MX_ADC_Init+0xb0>)
 8000326:	4a27      	ldr	r2, [pc, #156]	; (80003c4 <MX_ADC_Init+0xb4>)
 8000328:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800032a:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <MX_ADC_Init+0xb0>)
 800032c:	2200      	movs	r2, #0
 800032e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000330:	4b23      	ldr	r3, [pc, #140]	; (80003c0 <MX_ADC_Init+0xb0>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000336:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <MX_ADC_Init+0xb0>)
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800033c:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <MX_ADC_Init+0xb0>)
 800033e:	2201      	movs	r2, #1
 8000340:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000342:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <MX_ADC_Init+0xb0>)
 8000344:	2204      	movs	r2, #4
 8000346:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <MX_ADC_Init+0xb0>)
 800034a:	2200      	movs	r2, #0
 800034c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800034e:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <MX_ADC_Init+0xb0>)
 8000350:	2200      	movs	r2, #0
 8000352:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000354:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <MX_ADC_Init+0xb0>)
 8000356:	2200      	movs	r2, #0
 8000358:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <MX_ADC_Init+0xb0>)
 800035c:	2200      	movs	r2, #0
 800035e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_ADC_Init+0xb0>)
 8000362:	22c2      	movs	r2, #194	; 0xc2
 8000364:	32ff      	adds	r2, #255	; 0xff
 8000366:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_ADC_Init+0xb0>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_ADC_Init+0xb0>)
 8000370:	2224      	movs	r2, #36	; 0x24
 8000372:	2100      	movs	r1, #0
 8000374:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000376:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_ADC_Init+0xb0>)
 8000378:	2201      	movs	r2, #1
 800037a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MX_ADC_Init+0xb0>)
 800037e:	0018      	movs	r0, r3
 8000380:	f000 fb30 	bl	80009e4 <HAL_ADC_Init>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d001      	beq.n	800038c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000388:	f000 f944 	bl	8000614 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	0152      	lsls	r2, r2, #5
 8000398:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	0552      	lsls	r2, r2, #21
 80003a0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003a2:	1d3a      	adds	r2, r7, #4
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_ADC_Init+0xb0>)
 80003a6:	0011      	movs	r1, r2
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 fc5b 	bl	8000c64 <HAL_ADC_ConfigChannel>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003b2:	f000 f92f 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b004      	add	sp, #16
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	20000140 	.word	0x20000140
 80003c4:	40012400 	.word	0x40012400

080003c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_I2C1_Init+0x74>)
 80003ce:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <MX_I2C1_Init+0x78>)
 80003d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <MX_I2C1_Init+0x74>)
 80003d4:	4a1b      	ldr	r2, [pc, #108]	; (8000444 <MX_I2C1_Init+0x7c>)
 80003d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <MX_I2C1_Init+0x74>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_I2C1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_I2C1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_I2C1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_I2C1_Init+0x74>)
 8000404:	0018      	movs	r0, r3
 8000406:	f000 ff8f 	bl	8001328 <HAL_I2C_Init>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800040e:	f000 f901 	bl	8000614 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <MX_I2C1_Init+0x74>)
 8000414:	2100      	movs	r1, #0
 8000416:	0018      	movs	r0, r3
 8000418:	f001 f81c 	bl	8001454 <HAL_I2CEx_ConfigAnalogFilter>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000420:	f000 f8f8 	bl	8000614 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <MX_I2C1_Init+0x74>)
 8000426:	2100      	movs	r1, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f001 f85f 	bl	80014ec <HAL_I2CEx_ConfigDigitalFilter>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f8ef 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000028 	.word	0x20000028
 8000440:	40005400 	.word	0x40005400
 8000444:	2000090e 	.word	0x2000090e

08000448 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_TIM6_Init+0x38>)
 800044e:	4a0d      	ldr	r2, [pc, #52]	; (8000484 <MX_TIM6_Init+0x3c>)
 8000450:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_TIM6_Init+0x38>)
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_TIM6_Init+0x38>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_TIM6_Init+0x38>)
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <MX_TIM6_Init+0x40>)
 8000462:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <MX_TIM6_Init+0x38>)
 8000466:	2200      	movs	r2, #0
 8000468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <MX_TIM6_Init+0x38>)
 800046c:	0018      	movs	r0, r3
 800046e:	f001 fdc3 	bl	8001ff8 <HAL_TIM_Base_Init>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8000476:	f000 f8cd 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000074 	.word	0x20000074
 8000484:	40001000 	.word	0x40001000
 8000488:	0000ffff 	.word	0x0000ffff

0800048c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 8000492:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <MX_USART2_UART_Init+0x5c>)
 8000494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000496:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 8000498:	2296      	movs	r2, #150	; 0x96
 800049a:	0212      	lsls	r2, r2, #8
 800049c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 ffa5 	bl	8002420 <HAL_UART_Init>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004da:	f000 f89b 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000bc 	.word	0x200000bc
 80004e8:	40004400 	.word	0x40004400

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b08b      	sub	sp, #44	; 0x2c
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	2414      	movs	r4, #20
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2314      	movs	r3, #20
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f002 fb07 	bl	8002b10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	4b41      	ldr	r3, [pc, #260]	; (8000608 <MX_GPIO_Init+0x11c>)
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	4b40      	ldr	r3, [pc, #256]	; (8000608 <MX_GPIO_Init+0x11c>)
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	0309      	lsls	r1, r1, #12
 800050c:	430a      	orrs	r2, r1
 800050e:	615a      	str	r2, [r3, #20]
 8000510:	4b3d      	ldr	r3, [pc, #244]	; (8000608 <MX_GPIO_Init+0x11c>)
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	031b      	lsls	r3, r3, #12
 8000518:	4013      	ands	r3, r2
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051e:	4b3a      	ldr	r3, [pc, #232]	; (8000608 <MX_GPIO_Init+0x11c>)
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b39      	ldr	r3, [pc, #228]	; (8000608 <MX_GPIO_Init+0x11c>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	03c9      	lsls	r1, r1, #15
 8000528:	430a      	orrs	r2, r1
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	4b36      	ldr	r3, [pc, #216]	; (8000608 <MX_GPIO_Init+0x11c>)
 800052e:	695a      	ldr	r2, [r3, #20]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	03db      	lsls	r3, r3, #15
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b33      	ldr	r3, [pc, #204]	; (8000608 <MX_GPIO_Init+0x11c>)
 800053c:	695a      	ldr	r2, [r3, #20]
 800053e:	4b32      	ldr	r3, [pc, #200]	; (8000608 <MX_GPIO_Init+0x11c>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0289      	lsls	r1, r1, #10
 8000544:	430a      	orrs	r2, r1
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <MX_GPIO_Init+0x11c>)
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	029b      	lsls	r3, r3, #10
 8000550:	4013      	ands	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <MX_GPIO_Init+0x11c>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b2b      	ldr	r3, [pc, #172]	; (8000608 <MX_GPIO_Init+0x11c>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	02c9      	lsls	r1, r1, #11
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <MX_GPIO_Init+0x11c>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	02db      	lsls	r3, r3, #11
 800056c:	4013      	ands	r3, r2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000572:	2390      	movs	r3, #144	; 0x90
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	0018      	movs	r0, r3
 800057c:	f000 feb6 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_RS_Pin|DISPLAY_EN_Pin|DISPLAY_D4_Pin|DISPLAY_D5_Pin
 8000580:	23fc      	movs	r3, #252	; 0xfc
 8000582:	021b      	lsls	r3, r3, #8
 8000584:	4821      	ldr	r0, [pc, #132]	; (800060c <MX_GPIO_Init+0x120>)
 8000586:	2200      	movs	r2, #0
 8000588:	0019      	movs	r1, r3
 800058a:	f000 feaf 	bl	80012ec <HAL_GPIO_WritePin>
                          |DISPLAY_D6_Pin|DISPLAY_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	0192      	lsls	r2, r2, #6
 8000594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2284      	movs	r2, #132	; 0x84
 800059a:	0392      	lsls	r2, r2, #14
 800059c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <MX_GPIO_Init+0x124>)
 80005a8:	0019      	movs	r1, r3
 80005aa:	0010      	movs	r0, r2
 80005ac:	f000 fd2e 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2220      	movs	r2, #32
 80005b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2201      	movs	r2, #1
 80005ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005c8:	193a      	adds	r2, r7, r4
 80005ca:	2390      	movs	r3, #144	; 0x90
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	0011      	movs	r1, r2
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fd1b 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_RS_Pin DISPLAY_EN_Pin DISPLAY_D4_Pin DISPLAY_D5_Pin
                           DISPLAY_D6_Pin DISPLAY_D7_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RS_Pin|DISPLAY_EN_Pin|DISPLAY_D4_Pin|DISPLAY_D5_Pin
 80005d6:	0021      	movs	r1, r4
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	22fc      	movs	r2, #252	; 0xfc
 80005dc:	0212      	lsls	r2, r2, #8
 80005de:	601a      	str	r2, [r3, #0]
                          |DISPLAY_D6_Pin|DISPLAY_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2201      	movs	r2, #1
 80005e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	4a05      	ldr	r2, [pc, #20]	; (800060c <MX_GPIO_Init+0x120>)
 80005f6:	0019      	movs	r1, r3
 80005f8:	0010      	movs	r0, r2
 80005fa:	f000 fd07 	bl	800100c <HAL_GPIO_Init>

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b00b      	add	sp, #44	; 0x2c
 8000604:	bd90      	pop	{r4, r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	40021000 	.word	0x40021000
 800060c:	48000400 	.word	0x48000400
 8000610:	48000800 	.word	0x48000800

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_MspInit+0x44>)
 8000628:	699a      	ldr	r2, [r3, #24]
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_MspInit+0x44>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	619a      	str	r2, [r3, #24]
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_MspInit+0x44>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_MspInit+0x44>)
 8000640:	69da      	ldr	r2, [r3, #28]
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_MspInit+0x44>)
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0549      	lsls	r1, r1, #21
 8000648:	430a      	orrs	r2, r1
 800064a:	61da      	str	r2, [r3, #28]
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_MspInit+0x44>)
 800064e:	69da      	ldr	r2, [r3, #28]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	055b      	lsls	r3, r3, #21
 8000654:	4013      	ands	r3, r2
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b08b      	sub	sp, #44	; 0x2c
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	2414      	movs	r4, #20
 8000672:	193b      	adds	r3, r7, r4
 8000674:	0018      	movs	r0, r3
 8000676:	2314      	movs	r3, #20
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f002 fa48 	bl	8002b10 <memset>
  if(hadc->Instance==ADC1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <HAL_ADC_MspInit+0x84>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d12b      	bne.n	80006e2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 800068c:	699a      	ldr	r2, [r3, #24]
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0089      	lsls	r1, r1, #2
 8000694:	430a      	orrs	r2, r1
 8000696:	619a      	str	r2, [r3, #24]
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 800069a:	699a      	ldr	r2, [r3, #24]
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	0289      	lsls	r1, r1, #10
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	029b      	lsls	r3, r3, #10
 80006bc:	4013      	ands	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2203      	movs	r2, #3
 80006cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	193a      	adds	r2, r7, r4
 80006d6:	2390      	movs	r3, #144	; 0x90
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fc95 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b00b      	add	sp, #44	; 0x2c
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40012400 	.word	0x40012400
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	2414      	movs	r4, #20
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	2314      	movs	r3, #20
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f002 fa02 	bl	8002b10 <memset>
  if(hi2c->Instance==I2C1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <HAL_I2C_MspInit+0x90>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d131      	bne.n	800077a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <HAL_I2C_MspInit+0x94>)
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <HAL_I2C_MspInit+0x94>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	02c9      	lsls	r1, r1, #11
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <HAL_I2C_MspInit+0x94>)
 8000726:	695a      	ldr	r2, [r3, #20]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	02db      	lsls	r3, r3, #11
 800072c:	4013      	ands	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	22c0      	movs	r2, #192	; 0xc0
 8000738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2212      	movs	r2, #18
 800073e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2201      	movs	r2, #1
 8000744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2203      	movs	r2, #3
 800074a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2201      	movs	r2, #1
 8000750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	187b      	adds	r3, r7, r1
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <HAL_I2C_MspInit+0x98>)
 8000756:	0019      	movs	r1, r3
 8000758:	0010      	movs	r0, r2
 800075a:	f000 fc57 	bl	800100c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_I2C_MspInit+0x94>)
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_I2C_MspInit+0x94>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0389      	lsls	r1, r1, #14
 8000768:	430a      	orrs	r2, r1
 800076a:	61da      	str	r2, [r3, #28]
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_I2C_MspInit+0x94>)
 800076e:	69da      	ldr	r2, [r3, #28]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	039b      	lsls	r3, r3, #14
 8000774:	4013      	ands	r3, r2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b00b      	add	sp, #44	; 0x2c
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40005400 	.word	0x40005400
 8000788:	40021000 	.word	0x40021000
 800078c:	48000400 	.word	0x48000400

08000790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <HAL_TIM_Base_MspInit+0x44>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d113      	bne.n	80007ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <HAL_TIM_Base_MspInit+0x48>)
 80007a4:	69da      	ldr	r2, [r3, #28]
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_TIM_Base_MspInit+0x48>)
 80007a8:	2110      	movs	r1, #16
 80007aa:	430a      	orrs	r2, r1
 80007ac:	61da      	str	r2, [r3, #28]
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_TIM_Base_MspInit+0x48>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	2210      	movs	r2, #16
 80007b4:	4013      	ands	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2011      	movs	r0, #17
 80007c0:	f000 fbf2 	bl	8000fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80007c4:	2011      	movs	r0, #17
 80007c6:	f000 fc04 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b004      	add	sp, #16
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40001000 	.word	0x40001000
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b08b      	sub	sp, #44	; 0x2c
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	2414      	movs	r4, #20
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	0018      	movs	r0, r3
 80007ea:	2314      	movs	r3, #20
 80007ec:	001a      	movs	r2, r3
 80007ee:	2100      	movs	r1, #0
 80007f0:	f002 f98e 	bl	8002b10 <memset>
  if(huart->Instance==USART2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a1c      	ldr	r2, [pc, #112]	; (800086c <HAL_UART_MspInit+0x90>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d132      	bne.n	8000864 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_UART_MspInit+0x94>)
 8000800:	69da      	ldr	r2, [r3, #28]
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_UART_MspInit+0x94>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0289      	lsls	r1, r1, #10
 8000808:	430a      	orrs	r2, r1
 800080a:	61da      	str	r2, [r3, #28]
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_UART_MspInit+0x94>)
 800080e:	69da      	ldr	r2, [r3, #28]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	029b      	lsls	r3, r3, #10
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_UART_MspInit+0x94>)
 800081c:	695a      	ldr	r2, [r3, #20]
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_UART_MspInit+0x94>)
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	0289      	lsls	r1, r1, #10
 8000824:	430a      	orrs	r2, r1
 8000826:	615a      	str	r2, [r3, #20]
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_UART_MspInit+0x94>)
 800082a:	695a      	ldr	r2, [r3, #20]
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	029b      	lsls	r3, r3, #10
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000836:	0021      	movs	r1, r4
 8000838:	187b      	adds	r3, r7, r1
 800083a:	220c      	movs	r2, #12
 800083c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2202      	movs	r2, #2
 8000842:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2201      	movs	r2, #1
 8000854:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	187a      	adds	r2, r7, r1
 8000858:	2390      	movs	r3, #144	; 0x90
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fbd4 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b00b      	add	sp, #44	; 0x2c
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	40004400 	.word	0x40004400
 8000870:	40021000 	.word	0x40021000

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000898:	f000 f888 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <TIM6_IRQHandler+0x14>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 fbf4 	bl	8002098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	20000074 	.word	0x20000074

080008bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ce:	490e      	ldr	r1, [pc, #56]	; (8000908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <LoopForever+0xe>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e4:	4c0b      	ldr	r4, [pc, #44]	; (8000914 <LoopForever+0x16>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008f2:	f7ff ffe3 	bl	80008bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008f6:	f002 f8e7 	bl	8002ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fa:	f7ff fc91 	bl	8000220 <main>

080008fe <LoopForever>:

LoopForever:
    b LoopForever
 80008fe:	e7fe      	b.n	80008fe <LoopForever>
  ldr   r0, =_estack
 8000900:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800090c:	08002b78 	.word	0x08002b78
  ldr r2, =_sbss
 8000910:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000914:	20000184 	.word	0x20000184

08000918 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_IRQHandler>
	...

0800091c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_Init+0x24>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_Init+0x24>)
 8000926:	2110      	movs	r1, #16
 8000928:	430a      	orrs	r2, r1
 800092a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800092c:	2000      	movs	r0, #0
 800092e:	f000 f809 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000932:	f7ff fe75 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_InitTick+0x5c>)
 800094e:	681c      	ldr	r4, [r3, #0]
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_InitTick+0x60>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0019      	movs	r1, r3
 8000956:	23fa      	movs	r3, #250	; 0xfa
 8000958:	0098      	lsls	r0, r3, #2
 800095a:	f7ff fbd5 	bl	8000108 <__udivsi3>
 800095e:	0003      	movs	r3, r0
 8000960:	0019      	movs	r1, r3
 8000962:	0020      	movs	r0, r4
 8000964:	f7ff fbd0 	bl	8000108 <__udivsi3>
 8000968:	0003      	movs	r3, r0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fb41 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e00f      	b.n	8000998 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b03      	cmp	r3, #3
 800097c:	d80b      	bhi.n	8000996 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fb0e 	bl	8000fa8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_InitTick+0x64>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b003      	add	sp, #12
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x1c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	001a      	movs	r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_IncTick+0x20>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	18d2      	adds	r2, r2, r3
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <HAL_IncTick+0x20>)
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000180 	.word	0x20000180

080009d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <HAL_GetTick+0x10>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	20000180 	.word	0x20000180

080009e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ec:	230f      	movs	r3, #15
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e125      	b.n	8000c4e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10a      	bne.n	8000a20 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2234      	movs	r2, #52	; 0x34
 8000a14:	2100      	movs	r1, #0
 8000a16:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff fe24 	bl	8000668 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a24:	2210      	movs	r2, #16
 8000a26:	4013      	ands	r3, r2
 8000a28:	d000      	beq.n	8000a2c <HAL_ADC_Init+0x48>
 8000a2a:	e103      	b.n	8000c34 <HAL_ADC_Init+0x250>
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d000      	beq.n	8000a38 <HAL_ADC_Init+0x54>
 8000a36:	e0fd      	b.n	8000c34 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	2204      	movs	r2, #4
 8000a40:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000a42:	d000      	beq.n	8000a46 <HAL_ADC_Init+0x62>
 8000a44:	e0f6      	b.n	8000c34 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a4a:	4a83      	ldr	r2, [pc, #524]	; (8000c58 <HAL_ADC_Init+0x274>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	2202      	movs	r2, #2
 8000a50:	431a      	orrs	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d112      	bne.n	8000a8a <HAL_ADC_Init+0xa6>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d009      	beq.n	8000a86 <HAL_ADC_Init+0xa2>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d101      	bne.n	8000a8a <HAL_ADC_Init+0xa6>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <HAL_ADC_Init+0xa8>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d116      	bne.n	8000abe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	2218      	movs	r2, #24
 8000a98:	4393      	bics	r3, r2
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	0899      	lsrs	r1, r3, #2
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	430a      	orrs	r2, r1
 8000abc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4964      	ldr	r1, [pc, #400]	; (8000c5c <HAL_ADC_Init+0x278>)
 8000aca:	400a      	ands	r2, r1
 8000acc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7e1b      	ldrb	r3, [r3, #24]
 8000ad2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7e5b      	ldrb	r3, [r3, #25]
 8000ad8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ada:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7e9b      	ldrb	r3, [r3, #26]
 8000ae0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ae2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d002      	beq.n	8000af2 <HAL_ADC_Init+0x10e>
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	015b      	lsls	r3, r3, #5
 8000af0:	e000      	b.n	8000af4 <HAL_ADC_Init+0x110>
 8000af2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000af4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000afa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d101      	bne.n	8000b08 <HAL_ADC_Init+0x124>
 8000b04:	2304      	movs	r3, #4
 8000b06:	e000      	b.n	8000b0a <HAL_ADC_Init+0x126>
 8000b08:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000b0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2124      	movs	r1, #36	; 0x24
 8000b10:	5c5b      	ldrb	r3, [r3, r1]
 8000b12:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b14:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7edb      	ldrb	r3, [r3, #27]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d115      	bne.n	8000b50 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7e9b      	ldrb	r3, [r3, #26]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d105      	bne.n	8000b38 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	0252      	lsls	r2, r2, #9
 8000b32:	4313      	orrs	r3, r2
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	e00b      	b.n	8000b50 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b48:	2201      	movs	r2, #1
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69da      	ldr	r2, [r3, #28]
 8000b54:	23c2      	movs	r3, #194	; 0xc2
 8000b56:	33ff      	adds	r3, #255	; 0xff
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d007      	beq.n	8000b6c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b64:	4313      	orrs	r3, r2
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	68d9      	ldr	r1, [r3, #12]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	055b      	lsls	r3, r3, #21
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d01b      	beq.n	8000bc0 <HAL_ADC_Init+0x1dc>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d017      	beq.n	8000bc0 <HAL_ADC_Init+0x1dc>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d013      	beq.n	8000bc0 <HAL_ADC_Init+0x1dc>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d00f      	beq.n	8000bc0 <HAL_ADC_Init+0x1dc>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d00b      	beq.n	8000bc0 <HAL_ADC_Init+0x1dc>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bac:	2b05      	cmp	r3, #5
 8000bae:	d007      	beq.n	8000bc0 <HAL_ADC_Init+0x1dc>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	2b06      	cmp	r3, #6
 8000bb6:	d003      	beq.n	8000bc0 <HAL_ADC_Init+0x1dc>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	2b07      	cmp	r3, #7
 8000bbe:	d112      	bne.n	8000be6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2107      	movs	r1, #7
 8000bcc:	438a      	bics	r2, r1
 8000bce:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6959      	ldr	r1, [r3, #20]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bda:	2207      	movs	r2, #7
 8000bdc:	401a      	ands	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <HAL_ADC_Init+0x27c>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d10b      	bne.n	8000c0e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c00:	2203      	movs	r2, #3
 8000c02:	4393      	bics	r3, r2
 8000c04:	2201      	movs	r2, #1
 8000c06:	431a      	orrs	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c0c:	e01c      	b.n	8000c48 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c12:	2212      	movs	r2, #18
 8000c14:	4393      	bics	r3, r2
 8000c16:	2210      	movs	r2, #16
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c22:	2201      	movs	r2, #1
 8000c24:	431a      	orrs	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	18fb      	adds	r3, r7, r3
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c32:	e009      	b.n	8000c48 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c38:	2210      	movs	r2, #16
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c48:	230f      	movs	r3, #15
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	fffffefd 	.word	0xfffffefd
 8000c5c:	fffe0219 	.word	0xfffe0219
 8000c60:	833fffe7 	.word	0x833fffe7

08000c64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c6e:	230f      	movs	r3, #15
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	055b      	lsls	r3, r3, #21
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d011      	beq.n	8000caa <HAL_ADC_ConfigChannel+0x46>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d00d      	beq.n	8000caa <HAL_ADC_ConfigChannel+0x46>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d009      	beq.n	8000caa <HAL_ADC_ConfigChannel+0x46>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d005      	beq.n	8000caa <HAL_ADC_ConfigChannel+0x46>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d001      	beq.n	8000caa <HAL_ADC_ConfigChannel+0x46>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2234      	movs	r2, #52	; 0x34
 8000cae:	5c9b      	ldrb	r3, [r3, r2]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d101      	bne.n	8000cb8 <HAL_ADC_ConfigChannel+0x54>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e0bb      	b.n	8000e30 <HAL_ADC_ConfigChannel+0x1cc>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2234      	movs	r2, #52	; 0x34
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d000      	beq.n	8000cce <HAL_ADC_ConfigChannel+0x6a>
 8000ccc:	e09f      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	4a59      	ldr	r2, [pc, #356]	; (8000e38 <HAL_ADC_ConfigChannel+0x1d4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d100      	bne.n	8000cda <HAL_ADC_ConfigChannel+0x76>
 8000cd8:	e077      	b.n	8000dca <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	055b      	lsls	r3, r3, #21
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d037      	beq.n	8000d6c <HAL_ADC_ConfigChannel+0x108>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d033      	beq.n	8000d6c <HAL_ADC_ConfigChannel+0x108>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d02f      	beq.n	8000d6c <HAL_ADC_ConfigChannel+0x108>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d02b      	beq.n	8000d6c <HAL_ADC_ConfigChannel+0x108>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d027      	beq.n	8000d6c <HAL_ADC_ConfigChannel+0x108>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	d023      	beq.n	8000d6c <HAL_ADC_ConfigChannel+0x108>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d28:	2b06      	cmp	r3, #6
 8000d2a:	d01f      	beq.n	8000d6c <HAL_ADC_ConfigChannel+0x108>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	d01b      	beq.n	8000d6c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	2107      	movs	r1, #7
 8000d40:	400b      	ands	r3, r1
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d012      	beq.n	8000d6c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2107      	movs	r1, #7
 8000d52:	438a      	bics	r2, r1
 8000d54:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6959      	ldr	r1, [r3, #20]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	2207      	movs	r2, #7
 8000d62:	401a      	ands	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b10      	cmp	r3, #16
 8000d72:	d003      	beq.n	8000d7c <HAL_ADC_ConfigChannel+0x118>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b11      	cmp	r3, #17
 8000d7a:	d152      	bne.n	8000e22 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <HAL_ADC_ConfigChannel+0x1d8>)
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b10      	cmp	r3, #16
 8000d86:	d102      	bne.n	8000d8e <HAL_ADC_ConfigChannel+0x12a>
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	e001      	b.n	8000d92 <HAL_ADC_ConfigChannel+0x12e>
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	03db      	lsls	r3, r3, #15
 8000d92:	4a2a      	ldr	r2, [pc, #168]	; (8000e3c <HAL_ADC_ConfigChannel+0x1d8>)
 8000d94:	430b      	orrs	r3, r1
 8000d96:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b10      	cmp	r3, #16
 8000d9e:	d140      	bne.n	8000e22 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000da0:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <HAL_ADC_ConfigChannel+0x1dc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4927      	ldr	r1, [pc, #156]	; (8000e44 <HAL_ADC_ConfigChannel+0x1e0>)
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff f9ae 	bl	8000108 <__udivsi3>
 8000dac:	0003      	movs	r3, r0
 8000dae:	001a      	movs	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	189b      	adds	r3, r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dba:	e002      	b.n	8000dc2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f9      	bne.n	8000dbc <HAL_ADC_ConfigChannel+0x158>
 8000dc8:	e02b      	b.n	8000e22 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4099      	lsls	r1, r3
 8000dd8:	000b      	movs	r3, r1
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	400a      	ands	r2, r1
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b10      	cmp	r3, #16
 8000dea:	d003      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x190>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b11      	cmp	r3, #17
 8000df2:	d116      	bne.n	8000e22 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_ADC_ConfigChannel+0x1d8>)
 8000df6:	6819      	ldr	r1, [r3, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b10      	cmp	r3, #16
 8000dfe:	d101      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1a0>
 8000e00:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e02:	e000      	b.n	8000e06 <HAL_ADC_ConfigChannel+0x1a2>
 8000e04:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_ADC_ConfigChannel+0x1e8>)
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_ADC_ConfigChannel+0x1d8>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e009      	b.n	8000e22 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e12:	2220      	movs	r2, #32
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2234      	movs	r2, #52	; 0x34
 8000e26:	2100      	movs	r1, #0
 8000e28:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	781b      	ldrb	r3, [r3, #0]
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b004      	add	sp, #16
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	00001001 	.word	0x00001001
 8000e3c:	40012708 	.word	0x40012708
 8000e40:	20000000 	.word	0x20000000
 8000e44:	000f4240 	.word	0x000f4240
 8000e48:	ff7fffff 	.word	0xff7fffff
 8000e4c:	ffbfffff 	.word	0xffbfffff

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	0002      	movs	r2, r0
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b7f      	cmp	r3, #127	; 0x7f
 8000e62:	d809      	bhi.n	8000e78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	001a      	movs	r2, r3
 8000e6a:	231f      	movs	r3, #31
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_EnableIRQ+0x30>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	4091      	lsls	r1, r2
 8000e74:	000a      	movs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
  }
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b7f      	cmp	r3, #127	; 0x7f
 8000e98:	d828      	bhi.n	8000eec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9a:	4a2f      	ldr	r2, [pc, #188]	; (8000f58 <__NVIC_SetPriority+0xd4>)
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	33c0      	adds	r3, #192	; 0xc0
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	589b      	ldr	r3, [r3, r2]
 8000eaa:	1dfa      	adds	r2, r7, #7
 8000eac:	7812      	ldrb	r2, [r2, #0]
 8000eae:	0011      	movs	r1, r2
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	400a      	ands	r2, r1
 8000eb4:	00d2      	lsls	r2, r2, #3
 8000eb6:	21ff      	movs	r1, #255	; 0xff
 8000eb8:	4091      	lsls	r1, r2
 8000eba:	000a      	movs	r2, r1
 8000ebc:	43d2      	mvns	r2, r2
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	019b      	lsls	r3, r3, #6
 8000ec6:	22ff      	movs	r2, #255	; 0xff
 8000ec8:	401a      	ands	r2, r3
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	0018      	movs	r0, r3
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	4003      	ands	r3, r0
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed8:	481f      	ldr	r0, [pc, #124]	; (8000f58 <__NVIC_SetPriority+0xd4>)
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	33c0      	adds	r3, #192	; 0xc0
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eea:	e031      	b.n	8000f50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <__NVIC_SetPriority+0xd8>)
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	3b08      	subs	r3, #8
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3306      	adds	r3, #6
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	18d3      	adds	r3, r2, r3
 8000f02:	3304      	adds	r3, #4
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	1dfa      	adds	r2, r7, #7
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	400a      	ands	r2, r1
 8000f10:	00d2      	lsls	r2, r2, #3
 8000f12:	21ff      	movs	r1, #255	; 0xff
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	22ff      	movs	r2, #255	; 0xff
 8000f24:	401a      	ands	r2, r3
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	4003      	ands	r3, r0
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <__NVIC_SetPriority+0xd8>)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	001c      	movs	r4, r3
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	4023      	ands	r3, r4
 8000f40:	3b08      	subs	r3, #8
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	430a      	orrs	r2, r1
 8000f46:	3306      	adds	r3, #6
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	18c3      	adds	r3, r0, r3
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	601a      	str	r2, [r3, #0]
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b003      	add	sp, #12
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	1e5a      	subs	r2, r3, #1
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	045b      	lsls	r3, r3, #17
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d301      	bcc.n	8000f78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f74:	2301      	movs	r3, #1
 8000f76:	e010      	b.n	8000f9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <SysTick_Config+0x44>)
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	3a01      	subs	r2, #1
 8000f7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f80:	2301      	movs	r3, #1
 8000f82:	425b      	negs	r3, r3
 8000f84:	2103      	movs	r1, #3
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff ff7c 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SysTick_Config+0x44>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Config+0x44>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	1c02      	adds	r2, r0, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	0002      	movs	r2, r0
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff ff33 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ffaf 	bl	8000f60 <SysTick_Config>
 8001002:	0003      	movs	r3, r0
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e14f      	b.n	80012bc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4091      	lsls	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d100      	bne.n	8001034 <HAL_GPIO_Init+0x28>
 8001032:	e140      	b.n	80012b6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	2b01      	cmp	r3, #1
 800103e:	d005      	beq.n	800104c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001048:	2b02      	cmp	r3, #2
 800104a:	d130      	bne.n	80010ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	409a      	lsls	r2, r3
 800105a:	0013      	movs	r3, r2
 800105c:	43da      	mvns	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001082:	2201      	movs	r2, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	2201      	movs	r2, #1
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d017      	beq.n	80010ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	43da      	mvns	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	58d3      	ldr	r3, [r2, r3]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2207      	movs	r2, #7
 8001108:	4013      	ands	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2107      	movs	r1, #7
 8001122:	400b      	ands	r3, r1
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	6939      	ldr	r1, [r7, #16]
 800113c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	401a      	ands	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	23c0      	movs	r3, #192	; 0xc0
 8001178:	029b      	lsls	r3, r3, #10
 800117a:	4013      	ands	r3, r2
 800117c:	d100      	bne.n	8001180 <HAL_GPIO_Init+0x174>
 800117e:	e09a      	b.n	80012b6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	619a      	str	r2, [r3, #24]
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	2201      	movs	r2, #1
 8001192:	4013      	ands	r3, r2
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001198:	4a4f      	ldr	r2, [pc, #316]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	589b      	ldr	r3, [r3, r2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2203      	movs	r2, #3
 80011aa:	4013      	ands	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	409a      	lsls	r2, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	43da      	mvns	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	2390      	movs	r3, #144	; 0x90
 80011c0:	05db      	lsls	r3, r3, #23
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x1e2>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a44      	ldr	r2, [pc, #272]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x1de>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a43      	ldr	r2, [pc, #268]	; (80012e0 <HAL_GPIO_Init+0x2d4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x1da>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <HAL_GPIO_Init+0x2d8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x1d6>
 80011de:	2303      	movs	r3, #3
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011ee:	2300      	movs	r3, #0
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	2103      	movs	r1, #3
 80011f4:	400a      	ands	r2, r1
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	4013      	ands	r3, r2
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	029b      	lsls	r3, r3, #10
 8001250:	4013      	ands	r3, r2
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43da      	mvns	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	035b      	lsls	r3, r3, #13
 800127a:	4013      	ands	r3, r2
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43da      	mvns	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	039b      	lsls	r3, r3, #14
 80012a4:	4013      	ands	r3, r2
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	40da      	lsrs	r2, r3
 80012c4:	1e13      	subs	r3, r2, #0
 80012c6:	d000      	beq.n	80012ca <HAL_GPIO_Init+0x2be>
 80012c8:	e6a8      	b.n	800101c <HAL_GPIO_Init+0x10>
  } 
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b006      	add	sp, #24
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000
 80012dc:	48000400 	.word	0x48000400
 80012e0:	48000800 	.word	0x48000800
 80012e4:	48000c00 	.word	0x48000c00
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	0008      	movs	r0, r1
 80012f6:	0011      	movs	r1, r2
 80012f8:	1cbb      	adds	r3, r7, #2
 80012fa:	1c02      	adds	r2, r0, #0
 80012fc:	801a      	strh	r2, [r3, #0]
 80012fe:	1c7b      	adds	r3, r7, #1
 8001300:	1c0a      	adds	r2, r1, #0
 8001302:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001304:	1c7b      	adds	r3, r7, #1
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130c:	1cbb      	adds	r3, r7, #2
 800130e:	881a      	ldrh	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	1cbb      	adds	r3, r7, #2
 8001318:	881a      	ldrh	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e082      	b.n	8001440 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2241      	movs	r2, #65	; 0x41
 800133e:	5c9b      	ldrb	r3, [r3, r2]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d107      	bne.n	8001356 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2240      	movs	r2, #64	; 0x40
 800134a:	2100      	movs	r1, #0
 800134c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff f9cf 	bl	80006f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2241      	movs	r2, #65	; 0x41
 800135a:	2124      	movs	r1, #36	; 0x24
 800135c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2101      	movs	r1, #1
 800136a:	438a      	bics	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4934      	ldr	r1, [pc, #208]	; (8001448 <HAL_I2C_Init+0x120>)
 8001378:	400a      	ands	r2, r1
 800137a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4931      	ldr	r1, [pc, #196]	; (800144c <HAL_I2C_Init+0x124>)
 8001388:	400a      	ands	r2, r1
 800138a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d108      	bne.n	80013a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	0209      	lsls	r1, r1, #8
 80013a0:	430a      	orrs	r2, r1
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	e007      	b.n	80013b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2184      	movs	r1, #132	; 0x84
 80013b0:	0209      	lsls	r1, r1, #8
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d104      	bne.n	80013c8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2280      	movs	r2, #128	; 0x80
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	491f      	ldr	r1, [pc, #124]	; (8001450 <HAL_I2C_Init+0x128>)
 80013d4:	430a      	orrs	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	491a      	ldr	r1, [pc, #104]	; (800144c <HAL_I2C_Init+0x124>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69d9      	ldr	r1, [r3, #28]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1a      	ldr	r2, [r3, #32]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2241      	movs	r2, #65	; 0x41
 800142c:	2120      	movs	r1, #32
 800142e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2242      	movs	r2, #66	; 0x42
 800143a:	2100      	movs	r1, #0
 800143c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}
 8001448:	f0ffffff 	.word	0xf0ffffff
 800144c:	ffff7fff 	.word	0xffff7fff
 8001450:	02008000 	.word	0x02008000

08001454 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2241      	movs	r2, #65	; 0x41
 8001462:	5c9b      	ldrb	r3, [r3, r2]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b20      	cmp	r3, #32
 8001468:	d138      	bne.n	80014dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	5c9b      	ldrb	r3, [r3, r2]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d101      	bne.n	8001478 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001474:	2302      	movs	r3, #2
 8001476:	e032      	b.n	80014de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	2101      	movs	r1, #1
 800147e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2241      	movs	r2, #65	; 0x41
 8001484:	2124      	movs	r1, #36	; 0x24
 8001486:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2101      	movs	r1, #1
 8001494:	438a      	bics	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4911      	ldr	r1, [pc, #68]	; (80014e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6819      	ldr	r1, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2101      	movs	r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2241      	movs	r2, #65	; 0x41
 80014cc:	2120      	movs	r1, #32
 80014ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2240      	movs	r2, #64	; 0x40
 80014d4:	2100      	movs	r1, #0
 80014d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e000      	b.n	80014de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014dc:	2302      	movs	r3, #2
  }
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	ffffefff 	.word	0xffffefff

080014ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2241      	movs	r2, #65	; 0x41
 80014fa:	5c9b      	ldrb	r3, [r3, r2]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b20      	cmp	r3, #32
 8001500:	d139      	bne.n	8001576 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2240      	movs	r2, #64	; 0x40
 8001506:	5c9b      	ldrb	r3, [r3, r2]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800150c:	2302      	movs	r3, #2
 800150e:	e033      	b.n	8001578 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2240      	movs	r2, #64	; 0x40
 8001514:	2101      	movs	r1, #1
 8001516:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2241      	movs	r2, #65	; 0x41
 800151c:	2124      	movs	r1, #36	; 0x24
 800151e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800153c:	4013      	ands	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	430a      	orrs	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2241      	movs	r2, #65	; 0x41
 8001566:	2120      	movs	r1, #32
 8001568:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	2100      	movs	r1, #0
 8001570:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001576:	2302      	movs	r3, #2
  }
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}
 8001580:	fffff0ff 	.word	0xfffff0ff

08001584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e301      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	4013      	ands	r3, r2
 800159e:	d100      	bne.n	80015a2 <HAL_RCC_OscConfig+0x1e>
 80015a0:	e08d      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015a2:	4bc3      	ldr	r3, [pc, #780]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	220c      	movs	r2, #12
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d00e      	beq.n	80015cc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ae:	4bc0      	ldr	r3, [pc, #768]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	220c      	movs	r2, #12
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d116      	bne.n	80015e8 <HAL_RCC_OscConfig+0x64>
 80015ba:	4bbd      	ldr	r3, [pc, #756]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	401a      	ands	r2, r3
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	025b      	lsls	r3, r3, #9
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d10d      	bne.n	80015e8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	4bb8      	ldr	r3, [pc, #736]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	029b      	lsls	r3, r3, #10
 80015d4:	4013      	ands	r3, r2
 80015d6:	d100      	bne.n	80015da <HAL_RCC_OscConfig+0x56>
 80015d8:	e070      	b.n	80016bc <HAL_RCC_OscConfig+0x138>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d000      	beq.n	80015e4 <HAL_RCC_OscConfig+0x60>
 80015e2:	e06b      	b.n	80016bc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e2d8      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x7c>
 80015f0:	4baf      	ldr	r3, [pc, #700]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4bae      	ldr	r3, [pc, #696]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	0249      	lsls	r1, r1, #9
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e02f      	b.n	8001660 <HAL_RCC_OscConfig+0xdc>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10c      	bne.n	8001622 <HAL_RCC_OscConfig+0x9e>
 8001608:	4ba9      	ldr	r3, [pc, #676]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4ba8      	ldr	r3, [pc, #672]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800160e:	49a9      	ldr	r1, [pc, #676]	; (80018b4 <HAL_RCC_OscConfig+0x330>)
 8001610:	400a      	ands	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	4ba6      	ldr	r3, [pc, #664]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4ba5      	ldr	r3, [pc, #660]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800161a:	49a7      	ldr	r1, [pc, #668]	; (80018b8 <HAL_RCC_OscConfig+0x334>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	e01e      	b.n	8001660 <HAL_RCC_OscConfig+0xdc>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b05      	cmp	r3, #5
 8001628:	d10e      	bne.n	8001648 <HAL_RCC_OscConfig+0xc4>
 800162a:	4ba1      	ldr	r3, [pc, #644]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4ba0      	ldr	r3, [pc, #640]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	02c9      	lsls	r1, r1, #11
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	4b9d      	ldr	r3, [pc, #628]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b9c      	ldr	r3, [pc, #624]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	0249      	lsls	r1, r1, #9
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xdc>
 8001648:	4b99      	ldr	r3, [pc, #612]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b98      	ldr	r3, [pc, #608]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800164e:	4999      	ldr	r1, [pc, #612]	; (80018b4 <HAL_RCC_OscConfig+0x330>)
 8001650:	400a      	ands	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b95      	ldr	r3, [pc, #596]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800165a:	4997      	ldr	r1, [pc, #604]	; (80018b8 <HAL_RCC_OscConfig+0x334>)
 800165c:	400a      	ands	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d014      	beq.n	8001692 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff f9b2 	bl	80009d0 <HAL_GetTick>
 800166c:	0003      	movs	r3, r0
 800166e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001672:	f7ff f9ad 	bl	80009d0 <HAL_GetTick>
 8001676:	0002      	movs	r2, r0
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b64      	cmp	r3, #100	; 0x64
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e28a      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001684:	4b8a      	ldr	r3, [pc, #552]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	029b      	lsls	r3, r3, #10
 800168c:	4013      	ands	r3, r2
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0xee>
 8001690:	e015      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff f99d 	bl	80009d0 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff f998 	bl	80009d0 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e275      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b80      	ldr	r3, [pc, #512]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	4013      	ands	r3, r2
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x118>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2202      	movs	r2, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	d100      	bne.n	80016ca <HAL_RCC_OscConfig+0x146>
 80016c8:	e069      	b.n	800179e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016ca:	4b79      	ldr	r3, [pc, #484]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	220c      	movs	r2, #12
 80016d0:	4013      	ands	r3, r2
 80016d2:	d00b      	beq.n	80016ec <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016d4:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	220c      	movs	r2, #12
 80016da:	4013      	ands	r3, r2
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d11c      	bne.n	800171a <HAL_RCC_OscConfig+0x196>
 80016e0:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	025b      	lsls	r3, r3, #9
 80016e8:	4013      	ands	r3, r2
 80016ea:	d116      	bne.n	800171a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ec:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x17e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e24b      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	22f8      	movs	r2, #248	; 0xf8
 8001708:	4393      	bics	r3, r2
 800170a:	0019      	movs	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	00da      	lsls	r2, r3, #3
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001718:	e041      	b.n	800179e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d024      	beq.n	800176c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4b62      	ldr	r3, [pc, #392]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff f94f 	bl	80009d0 <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff f94a 	bl	80009d0 <HAL_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e227      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d0f1      	beq.n	8001738 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	22f8      	movs	r2, #248	; 0xf8
 800175a:	4393      	bics	r3, r2
 800175c:	0019      	movs	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00da      	lsls	r2, r3, #3
 8001764:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e018      	b.n	800179e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001772:	2101      	movs	r1, #1
 8001774:	438a      	bics	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff f92a 	bl	80009d0 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff f925 	bl	80009d0 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e202      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001794:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d1f1      	bne.n	8001782 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2208      	movs	r2, #8
 80017a4:	4013      	ands	r3, r2
 80017a6:	d036      	beq.n	8001816 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d019      	beq.n	80017e4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b0:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b4:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	430a      	orrs	r2, r1
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff f908 	bl	80009d0 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c6:	f7ff f903 	bl	80009d0 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1e0      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d8:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d0f1      	beq.n	80017c6 <HAL_RCC_OscConfig+0x242>
 80017e2:	e018      	b.n	8001816 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e4:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80017e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	438a      	bics	r2, r1
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7ff f8ee 	bl	80009d0 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff f8e9 	bl	80009d0 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e1c6      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d1f1      	bne.n	80017fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2204      	movs	r2, #4
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x29e>
 8001820:	e0b4      	b.n	800198c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001822:	201f      	movs	r0, #31
 8001824:	183b      	adds	r3, r7, r0
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800182c:	69da      	ldr	r2, [r3, #28]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	055b      	lsls	r3, r3, #21
 8001832:	4013      	ands	r3, r2
 8001834:	d110      	bne.n	8001858 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001838:	69da      	ldr	r2, [r3, #28]
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	0549      	lsls	r1, r1, #21
 8001840:	430a      	orrs	r2, r1
 8001842:	61da      	str	r2, [r3, #28]
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 8001846:	69da      	ldr	r2, [r3, #28]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	055b      	lsls	r3, r3, #21
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001852:	183b      	adds	r3, r7, r0
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_RCC_OscConfig+0x338>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4013      	ands	r3, r2
 8001862:	d11a      	bne.n	800189a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x338>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_RCC_OscConfig+0x338>)
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	0049      	lsls	r1, r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001872:	f7ff f8ad 	bl	80009d0 <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187c:	f7ff f8a8 	bl	80009d0 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e185      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x338>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4013      	ands	r3, r2
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10e      	bne.n	80018c0 <HAL_RCC_OscConfig+0x33c>
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80018a4:	6a1a      	ldr	r2, [r3, #32]
 80018a6:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <HAL_RCC_OscConfig+0x32c>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	621a      	str	r2, [r3, #32]
 80018ae:	e035      	b.n	800191c <HAL_RCC_OscConfig+0x398>
 80018b0:	40021000 	.word	0x40021000
 80018b4:	fffeffff 	.word	0xfffeffff
 80018b8:	fffbffff 	.word	0xfffbffff
 80018bc:	40007000 	.word	0x40007000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x35e>
 80018c8:	4bb6      	ldr	r3, [pc, #728]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80018ca:	6a1a      	ldr	r2, [r3, #32]
 80018cc:	4bb5      	ldr	r3, [pc, #724]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	438a      	bics	r2, r1
 80018d2:	621a      	str	r2, [r3, #32]
 80018d4:	4bb3      	ldr	r3, [pc, #716]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80018d6:	6a1a      	ldr	r2, [r3, #32]
 80018d8:	4bb2      	ldr	r3, [pc, #712]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80018da:	2104      	movs	r1, #4
 80018dc:	438a      	bics	r2, r1
 80018de:	621a      	str	r2, [r3, #32]
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0x398>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x380>
 80018ea:	4bae      	ldr	r3, [pc, #696]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80018ec:	6a1a      	ldr	r2, [r3, #32]
 80018ee:	4bad      	ldr	r3, [pc, #692]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80018f0:	2104      	movs	r1, #4
 80018f2:	430a      	orrs	r2, r1
 80018f4:	621a      	str	r2, [r3, #32]
 80018f6:	4bab      	ldr	r3, [pc, #684]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80018f8:	6a1a      	ldr	r2, [r3, #32]
 80018fa:	4baa      	ldr	r3, [pc, #680]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	621a      	str	r2, [r3, #32]
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0x398>
 8001904:	4ba7      	ldr	r3, [pc, #668]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001906:	6a1a      	ldr	r2, [r3, #32]
 8001908:	4ba6      	ldr	r3, [pc, #664]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 800190a:	2101      	movs	r1, #1
 800190c:	438a      	bics	r2, r1
 800190e:	621a      	str	r2, [r3, #32]
 8001910:	4ba4      	ldr	r3, [pc, #656]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	4ba3      	ldr	r3, [pc, #652]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001916:	2104      	movs	r1, #4
 8001918:	438a      	bics	r2, r1
 800191a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d014      	beq.n	800194e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff f854 	bl	80009d0 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	e009      	b.n	8001942 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff f84f 	bl	80009d0 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	4a9b      	ldr	r2, [pc, #620]	; (8001ba8 <HAL_RCC_OscConfig+0x624>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e12b      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	4b98      	ldr	r3, [pc, #608]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	2202      	movs	r2, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x3aa>
 800194c:	e013      	b.n	8001976 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff f83f 	bl	80009d0 <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001956:	e009      	b.n	800196c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff f83a 	bl	80009d0 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	4a91      	ldr	r2, [pc, #580]	; (8001ba8 <HAL_RCC_OscConfig+0x624>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e116      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196c:	4b8d      	ldr	r3, [pc, #564]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001976:	231f      	movs	r3, #31
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b88      	ldr	r3, [pc, #544]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001982:	69da      	ldr	r2, [r3, #28]
 8001984:	4b87      	ldr	r3, [pc, #540]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001986:	4989      	ldr	r1, [pc, #548]	; (8001bac <HAL_RCC_OscConfig+0x628>)
 8001988:	400a      	ands	r2, r1
 800198a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2210      	movs	r2, #16
 8001992:	4013      	ands	r3, r2
 8001994:	d063      	beq.n	8001a5e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d12a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800199e:	4b81      	ldr	r3, [pc, #516]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80019a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a2:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80019a4:	2104      	movs	r1, #4
 80019a6:	430a      	orrs	r2, r1
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019aa:	4b7e      	ldr	r3, [pc, #504]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80019ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ae:	4b7d      	ldr	r3, [pc, #500]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80019b0:	2101      	movs	r1, #1
 80019b2:	430a      	orrs	r2, r1
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b6:	f7ff f80b 	bl	80009d0 <HAL_GetTick>
 80019ba:	0003      	movs	r3, r0
 80019bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019c0:	f7ff f806 	bl	80009d0 <HAL_GetTick>
 80019c4:	0002      	movs	r2, r0
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e0e3      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019d2:	4b74      	ldr	r3, [pc, #464]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	d0f1      	beq.n	80019c0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019dc:	4b71      	ldr	r3, [pc, #452]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80019de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e0:	22f8      	movs	r2, #248	; 0xf8
 80019e2:	4393      	bics	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	00da      	lsls	r2, r3, #3
 80019ec:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	635a      	str	r2, [r3, #52]	; 0x34
 80019f2:	e034      	b.n	8001a5e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	3305      	adds	r3, #5
 80019fa:	d111      	bne.n	8001a20 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019fc:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 80019fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a00:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a02:	2104      	movs	r1, #4
 8001a04:	438a      	bics	r2, r1
 8001a06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a08:	4b66      	ldr	r3, [pc, #408]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	22f8      	movs	r2, #248	; 0xf8
 8001a0e:	4393      	bics	r3, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	00da      	lsls	r2, r3, #3
 8001a18:	4b62      	ldr	r3, [pc, #392]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1e:	e01e      	b.n	8001a5e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a20:	4b60      	ldr	r3, [pc, #384]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a24:	4b5f      	ldr	r3, [pc, #380]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a26:	2104      	movs	r1, #4
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a30:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	438a      	bics	r2, r1
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a38:	f7fe ffca 	bl	80009d0 <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a42:	f7fe ffc5 	bl	80009d0 <HAL_GetTick>
 8001a46:	0002      	movs	r2, r0
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0a2      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	2202      	movs	r2, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d1f1      	bne.n	8001a42 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d100      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4e4>
 8001a66:	e097      	b.n	8001b98 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a68:	4b4e      	ldr	r3, [pc, #312]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d100      	bne.n	8001a76 <HAL_RCC_OscConfig+0x4f2>
 8001a74:	e06b      	b.n	8001b4e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d14c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b48      	ldr	r3, [pc, #288]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001a84:	494a      	ldr	r1, [pc, #296]	; (8001bb0 <HAL_RCC_OscConfig+0x62c>)
 8001a86:	400a      	ands	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7fe ffa1 	bl	80009d0 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a94:	f7fe ff9c 	bl	80009d0 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e079      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	049b      	lsls	r3, r3, #18
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	4393      	bics	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac0:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4a3a      	ldr	r2, [pc, #232]	; (8001bb4 <HAL_RCC_OscConfig+0x630>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	0019      	movs	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	0449      	lsls	r1, r1, #17
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7fe ff6f 	bl	80009d0 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af8:	f7fe ff6a 	bl	80009d0 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e047      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	049b      	lsls	r3, r3, #18
 8001b12:	4013      	ands	r3, r2
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x574>
 8001b16:	e03f      	b.n	8001b98 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001b1e:	4924      	ldr	r1, [pc, #144]	; (8001bb0 <HAL_RCC_OscConfig+0x62c>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7fe ff54 	bl	80009d0 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7fe ff4f 	bl	80009d0 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e02c      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	049b      	lsls	r3, r3, #18
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5aa>
 8001b4c:	e024      	b.n	8001b98 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e01f      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_RCC_OscConfig+0x620>)
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	025b      	lsls	r3, r3, #9
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d10e      	bne.n	8001b94 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	220f      	movs	r2, #15
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	23f0      	movs	r3, #240	; 0xf0
 8001b88:	039b      	lsls	r3, r3, #14
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b008      	add	sp, #32
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	00001388 	.word	0x00001388
 8001bac:	efffffff 	.word	0xefffffff
 8001bb0:	feffffff 	.word	0xfeffffff
 8001bb4:	ffc2ffff 	.word	0xffc2ffff

08001bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b3      	b.n	8001d34 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <HAL_RCC_ClockConfig+0x184>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d911      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <HAL_RCC_ClockConfig+0x184>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4393      	bics	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <HAL_RCC_ClockConfig+0x184>)
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_ClockConfig+0x184>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e09a      	b.n	8001d34 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d015      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d006      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c12:	4b4b      	ldr	r3, [pc, #300]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001c18:	21e0      	movs	r1, #224	; 0xe0
 8001c1a:	00c9      	lsls	r1, r1, #3
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c20:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	22f0      	movs	r2, #240	; 0xf0
 8001c26:	4393      	bics	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d040      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b3e      	ldr	r3, [pc, #248]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	029b      	lsls	r3, r3, #10
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d114      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e06e      	b.n	8001d34 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	049b      	lsls	r3, r3, #18
 8001c66:	4013      	ands	r3, r2
 8001c68:	d108      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e062      	b.n	8001d34 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6e:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e05b      	b.n	8001d34 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7c:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	4393      	bics	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c90:	f7fe fe9e 	bl	80009d0 <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c98:	e009      	b.n	8001cae <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9a:	f7fe fe99 	bl	80009d0 <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <HAL_RCC_ClockConfig+0x18c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e042      	b.n	8001d34 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1ec      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_RCC_ClockConfig+0x184>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d211      	bcs.n	8001cf2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_ClockConfig+0x184>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4393      	bics	r3, r2
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_RCC_ClockConfig+0x184>)
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_RCC_ClockConfig+0x184>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e020      	b.n	8001d34 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d009      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <HAL_RCC_ClockConfig+0x190>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d10:	f000 f820 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d14:	0001      	movs	r1, r0
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_RCC_ClockConfig+0x188>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	4013      	ands	r3, r2
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_RCC_ClockConfig+0x194>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	000a      	movs	r2, r1
 8001d26:	40da      	lsrs	r2, r3
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x198>)
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7fe fe09 	bl	8000944 <HAL_InitTick>
  
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	00001388 	.word	0x00001388
 8001d48:	fffff8ff 	.word	0xfffff8ff
 8001d4c:	08002b58 	.word	0x08002b58
 8001d50:	20000000 	.word	0x20000000

08001d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b08f      	sub	sp, #60	; 0x3c
 8001d58:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d5a:	2314      	movs	r3, #20
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	4a2b      	ldr	r2, [pc, #172]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d62:	c313      	stmia	r3!, {r0, r1, r4}
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d6e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	220c      	movs	r2, #12
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d002      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x4a>
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d003      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x50>
 8001d9c:	e02d      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001da2:	e02d      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	0c9b      	lsrs	r3, r3, #18
 8001da8:	220f      	movs	r2, #15
 8001daa:	4013      	ands	r3, r2
 8001dac:	2214      	movs	r2, #20
 8001dae:	18ba      	adds	r2, r7, r2
 8001db0:	5cd3      	ldrb	r3, [r2, r3]
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	220f      	movs	r2, #15
 8001dba:	4013      	ands	r3, r2
 8001dbc:	1d3a      	adds	r2, r7, #4
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	025b      	lsls	r3, r3, #9
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dce:	4812      	ldr	r0, [pc, #72]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dd0:	f7fe f99a 	bl	8000108 <__udivsi3>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	4353      	muls	r3, r2
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8001dde:	e009      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de2:	000a      	movs	r2, r1
 8001de4:	0152      	lsls	r2, r2, #5
 8001de6:	1a52      	subs	r2, r2, r1
 8001de8:	0193      	lsls	r3, r2, #6
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	185b      	adds	r3, r3, r1
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df8:	e002      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dfe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b00f      	add	sp, #60	; 0x3c
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	08002b38 	.word	0x08002b38
 8001e10:	08002b48 	.word	0x08002b48
 8001e14:	40021000 	.word	0x40021000
 8001e18:	007a1200 	.word	0x007a1200

08001e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	20000000 	.word	0x20000000

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e34:	f7ff fff2 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e38:	0001      	movs	r1, r0
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	2207      	movs	r2, #7
 8001e42:	4013      	ands	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	40d9      	lsrs	r1, r3
 8001e4a:	000b      	movs	r3, r1
}    
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08002b68 	.word	0x08002b68

08001e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	025b      	lsls	r3, r3, #9
 8001e74:	4013      	ands	r3, r2
 8001e76:	d100      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e78:	e08e      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2017      	movs	r0, #23
 8001e7c:	183b      	adds	r3, r7, r0
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	055b      	lsls	r3, r3, #21
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d110      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0549      	lsls	r1, r1, #21
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	61da      	str	r2, [r3, #28]
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	055b      	lsls	r3, r3, #21
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d11a      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ebc:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	0049      	lsls	r1, r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eca:	f7fe fd81 	bl	80009d0 <HAL_GetTick>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed4:	f7fe fd7c 	bl	80009d0 <HAL_GetTick>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e077      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ef4:	6a1a      	ldr	r2, [r3, #32]
 8001ef6:	23c0      	movs	r3, #192	; 0xc0
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d034      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	23c0      	movs	r3, #192	; 0xc0
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d02c      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f14:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a33      	ldr	r2, [pc, #204]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f1e:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f20:	6a1a      	ldr	r2, [r3, #32]
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	0249      	lsls	r1, r1, #9
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f32:	492e      	ldr	r1, [pc, #184]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f38:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe fd43 	bl	80009d0 <HAL_GetTick>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	e009      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7fe fd3e 	bl	80009d0 <HAL_GetTick>
 8001f54:	0002      	movs	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	4a25      	ldr	r2, [pc, #148]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e038      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f82:	2317      	movs	r3, #23
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f92:	4918      	ldr	r1, [pc, #96]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	4393      	bics	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d009      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	4393      	bics	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b006      	add	sp, #24
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	fffffcff 	.word	0xfffffcff
 8001fec:	fffeffff 	.word	0xfffeffff
 8001ff0:	00001388 	.word	0x00001388
 8001ff4:	efffffff 	.word	0xefffffff

08001ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e042      	b.n	8002090 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	223d      	movs	r2, #61	; 0x3d
 800200e:	5c9b      	ldrb	r3, [r3, r2]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d107      	bne.n	8002026 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	223c      	movs	r2, #60	; 0x3c
 800201a:	2100      	movs	r1, #0
 800201c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f7fe fbb5 	bl	8000790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	223d      	movs	r2, #61	; 0x3d
 800202a:	2102      	movs	r1, #2
 800202c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	0019      	movs	r1, r3
 8002038:	0010      	movs	r0, r2
 800203a:	f000 f96b 	bl	8002314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2246      	movs	r2, #70	; 0x46
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	223e      	movs	r2, #62	; 0x3e
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	223f      	movs	r2, #63	; 0x3f
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2240      	movs	r2, #64	; 0x40
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2241      	movs	r2, #65	; 0x41
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2242      	movs	r2, #66	; 0x42
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2243      	movs	r2, #67	; 0x43
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2244      	movs	r2, #68	; 0x44
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2245      	movs	r2, #69	; 0x45
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	223d      	movs	r2, #61	; 0x3d
 800208a:	2101      	movs	r1, #1
 800208c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2202      	movs	r2, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d124      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2202      	movs	r2, #2
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d11d      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2203      	movs	r2, #3
 80020c2:	4252      	negs	r2, r2
 80020c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2203      	movs	r2, #3
 80020d4:	4013      	ands	r3, r2
 80020d6:	d004      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 f902 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 80020e0:	e007      	b.n	80020f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 f8f5 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f901 	bl	80022f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2204      	movs	r2, #4
 8002100:	4013      	ands	r3, r2
 8002102:	2b04      	cmp	r3, #4
 8002104:	d125      	bne.n	8002152 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2204      	movs	r2, #4
 800210e:	4013      	ands	r3, r2
 8002110:	2b04      	cmp	r3, #4
 8002112:	d11e      	bne.n	8002152 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2205      	movs	r2, #5
 800211a:	4252      	negs	r2, r2
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	23c0      	movs	r3, #192	; 0xc0
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d004      	beq.n	800213c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0018      	movs	r0, r3
 8002136:	f000 f8d5 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 800213a:	e007      	b.n	800214c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 f8c8 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 f8d4 	bl	80022f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2208      	movs	r2, #8
 800215a:	4013      	ands	r3, r2
 800215c:	2b08      	cmp	r3, #8
 800215e:	d124      	bne.n	80021aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2208      	movs	r2, #8
 8002168:	4013      	ands	r3, r2
 800216a:	2b08      	cmp	r3, #8
 800216c:	d11d      	bne.n	80021aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2209      	movs	r2, #9
 8002174:	4252      	negs	r2, r2
 8002176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2204      	movs	r2, #4
 800217c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2203      	movs	r2, #3
 8002186:	4013      	ands	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f000 f8a9 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 8002192:	e007      	b.n	80021a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	0018      	movs	r0, r3
 8002198:	f000 f89c 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 f8a8 	bl	80022f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2210      	movs	r2, #16
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d125      	bne.n	8002204 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2210      	movs	r2, #16
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d11e      	bne.n	8002204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2211      	movs	r2, #17
 80021cc:	4252      	negs	r2, r2
 80021ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2208      	movs	r2, #8
 80021d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	23c0      	movs	r3, #192	; 0xc0
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d004      	beq.n	80021ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 f87c 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 80021ec:	e007      	b.n	80021fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f000 f86f 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 f87b 	bl	80022f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2201      	movs	r2, #1
 800220c:	4013      	ands	r3, r2
 800220e:	2b01      	cmp	r3, #1
 8002210:	d10f      	bne.n	8002232 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	4013      	ands	r3, r2
 800221c:	2b01      	cmp	r3, #1
 800221e:	d108      	bne.n	8002232 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2202      	movs	r2, #2
 8002226:	4252      	negs	r2, r2
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0018      	movs	r0, r3
 800222e:	f000 f849 	bl	80022c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	4013      	ands	r3, r2
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d10f      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	4013      	ands	r3, r2
 800224a:	2b80      	cmp	r3, #128	; 0x80
 800224c:	d108      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2281      	movs	r2, #129	; 0x81
 8002254:	4252      	negs	r2, r2
 8002256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	0018      	movs	r0, r3
 800225c:	f000 f8d8 	bl	8002410 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	4013      	ands	r3, r2
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	d10f      	bne.n	800228e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2240      	movs	r2, #64	; 0x40
 8002276:	4013      	ands	r3, r2
 8002278:	2b40      	cmp	r3, #64	; 0x40
 800227a:	d108      	bne.n	800228e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2241      	movs	r2, #65	; 0x41
 8002282:	4252      	negs	r2, r2
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 f83b 	bl	8002304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2220      	movs	r2, #32
 8002296:	4013      	ands	r3, r2
 8002298:	2b20      	cmp	r3, #32
 800229a:	d10f      	bne.n	80022bc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d108      	bne.n	80022bc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2221      	movs	r2, #33	; 0x21
 80022b0:	4252      	negs	r2, r2
 80022b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 f8a2 	bl	8002400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}

08002314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <TIM_Base_SetConfig+0xd0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_Base_SetConfig+0x20>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a2e      	ldr	r2, [pc, #184]	; (80023e8 <TIM_Base_SetConfig+0xd4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d108      	bne.n	8002346 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2270      	movs	r2, #112	; 0x70
 8002338:	4393      	bics	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <TIM_Base_SetConfig+0xd0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <TIM_Base_SetConfig+0x62>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <TIM_Base_SetConfig+0xd4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00f      	beq.n	8002376 <TIM_Base_SetConfig+0x62>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a24      	ldr	r2, [pc, #144]	; (80023ec <TIM_Base_SetConfig+0xd8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00b      	beq.n	8002376 <TIM_Base_SetConfig+0x62>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <TIM_Base_SetConfig+0xdc>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <TIM_Base_SetConfig+0x62>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <TIM_Base_SetConfig+0xe0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d003      	beq.n	8002376 <TIM_Base_SetConfig+0x62>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <TIM_Base_SetConfig+0xe4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a20      	ldr	r2, [pc, #128]	; (80023fc <TIM_Base_SetConfig+0xe8>)
 800237a:	4013      	ands	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	4393      	bics	r3, r2
 800238e:	001a      	movs	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <TIM_Base_SetConfig+0xd0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00b      	beq.n	80023ce <TIM_Base_SetConfig+0xba>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <TIM_Base_SetConfig+0xdc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <TIM_Base_SetConfig+0xba>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <TIM_Base_SetConfig+0xe0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d003      	beq.n	80023ce <TIM_Base_SetConfig+0xba>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <TIM_Base_SetConfig+0xe4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d103      	bne.n	80023d6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	615a      	str	r2, [r3, #20]
}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b004      	add	sp, #16
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40012c00 	.word	0x40012c00
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40002000 	.word	0x40002000
 80023f0:	40014000 	.word	0x40014000
 80023f4:	40014400 	.word	0x40014400
 80023f8:	40014800 	.word	0x40014800
 80023fc:	fffffcff 	.word	0xfffffcff

08002400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e044      	b.n	80024bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002436:	2b00      	cmp	r3, #0
 8002438:	d107      	bne.n	800244a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2274      	movs	r2, #116	; 0x74
 800243e:	2100      	movs	r1, #0
 8002440:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f7fe f9c9 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2224      	movs	r2, #36	; 0x24
 800244e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2101      	movs	r1, #1
 800245c:	438a      	bics	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f830 	bl	80024c8 <UART_SetConfig>
 8002468:	0003      	movs	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e024      	b.n	80024bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0018      	movs	r0, r3
 800247e:	f000 f963 	bl	8002748 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	490d      	ldr	r1, [pc, #52]	; (80024c4 <HAL_UART_Init+0xa4>)
 800248e:	400a      	ands	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2108      	movs	r1, #8
 800249e:	438a      	bics	r2, r1
 80024a0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 f9fb 	bl	80028b0 <UART_CheckIdleState>
 80024ba:	0003      	movs	r3, r0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	fffff7ff 	.word	0xfffff7ff

080024c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024d0:	231e      	movs	r3, #30
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a8d      	ldr	r2, [pc, #564]	; (800272c <UART_SetConfig+0x264>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a88      	ldr	r2, [pc, #544]	; (8002730 <UART_SetConfig+0x268>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a7f      	ldr	r2, [pc, #508]	; (8002734 <UART_SetConfig+0x26c>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	430a      	orrs	r2, r1
 8002542:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a7b      	ldr	r2, [pc, #492]	; (8002738 <UART_SetConfig+0x270>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d127      	bne.n	800259e <UART_SetConfig+0xd6>
 800254e:	4b7b      	ldr	r3, [pc, #492]	; (800273c <UART_SetConfig+0x274>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	2203      	movs	r2, #3
 8002554:	4013      	ands	r3, r2
 8002556:	2b03      	cmp	r3, #3
 8002558:	d00d      	beq.n	8002576 <UART_SetConfig+0xae>
 800255a:	d81b      	bhi.n	8002594 <UART_SetConfig+0xcc>
 800255c:	2b02      	cmp	r3, #2
 800255e:	d014      	beq.n	800258a <UART_SetConfig+0xc2>
 8002560:	d818      	bhi.n	8002594 <UART_SetConfig+0xcc>
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <UART_SetConfig+0xa4>
 8002566:	2b01      	cmp	r3, #1
 8002568:	d00a      	beq.n	8002580 <UART_SetConfig+0xb8>
 800256a:	e013      	b.n	8002594 <UART_SetConfig+0xcc>
 800256c:	231f      	movs	r3, #31
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e021      	b.n	80025ba <UART_SetConfig+0xf2>
 8002576:	231f      	movs	r3, #31
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2202      	movs	r2, #2
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e01c      	b.n	80025ba <UART_SetConfig+0xf2>
 8002580:	231f      	movs	r3, #31
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2204      	movs	r2, #4
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	e017      	b.n	80025ba <UART_SetConfig+0xf2>
 800258a:	231f      	movs	r3, #31
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	2208      	movs	r2, #8
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e012      	b.n	80025ba <UART_SetConfig+0xf2>
 8002594:	231f      	movs	r3, #31
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2210      	movs	r2, #16
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	e00d      	b.n	80025ba <UART_SetConfig+0xf2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a67      	ldr	r2, [pc, #412]	; (8002740 <UART_SetConfig+0x278>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d104      	bne.n	80025b2 <UART_SetConfig+0xea>
 80025a8:	231f      	movs	r3, #31
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	e003      	b.n	80025ba <UART_SetConfig+0xf2>
 80025b2:	231f      	movs	r3, #31
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2210      	movs	r2, #16
 80025b8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69da      	ldr	r2, [r3, #28]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d15d      	bne.n	8002682 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80025c6:	231f      	movs	r3, #31
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d015      	beq.n	80025fc <UART_SetConfig+0x134>
 80025d0:	dc18      	bgt.n	8002604 <UART_SetConfig+0x13c>
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d00d      	beq.n	80025f2 <UART_SetConfig+0x12a>
 80025d6:	dc15      	bgt.n	8002604 <UART_SetConfig+0x13c>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <UART_SetConfig+0x11a>
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d005      	beq.n	80025ec <UART_SetConfig+0x124>
 80025e0:	e010      	b.n	8002604 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025e2:	f7ff fc25 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80025e6:	0003      	movs	r3, r0
 80025e8:	61bb      	str	r3, [r7, #24]
        break;
 80025ea:	e012      	b.n	8002612 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025ec:	4b55      	ldr	r3, [pc, #340]	; (8002744 <UART_SetConfig+0x27c>)
 80025ee:	61bb      	str	r3, [r7, #24]
        break;
 80025f0:	e00f      	b.n	8002612 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025f2:	f7ff fbaf 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 80025f6:	0003      	movs	r3, r0
 80025f8:	61bb      	str	r3, [r7, #24]
        break;
 80025fa:	e00a      	b.n	8002612 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	61bb      	str	r3, [r7, #24]
        break;
 8002602:	e006      	b.n	8002612 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002608:	231e      	movs	r3, #30
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
        break;
 8002610:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d100      	bne.n	800261a <UART_SetConfig+0x152>
 8002618:	e07b      	b.n	8002712 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	005a      	lsls	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	085b      	lsrs	r3, r3, #1
 8002624:	18d2      	adds	r2, r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0019      	movs	r1, r3
 800262c:	0010      	movs	r0, r2
 800262e:	f7fd fd6b 	bl	8000108 <__udivsi3>
 8002632:	0003      	movs	r3, r0
 8002634:	b29b      	uxth	r3, r3
 8002636:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	d91c      	bls.n	8002678 <UART_SetConfig+0x1b0>
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	025b      	lsls	r3, r3, #9
 8002644:	429a      	cmp	r2, r3
 8002646:	d217      	bcs.n	8002678 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	b29a      	uxth	r2, r3
 800264c:	200e      	movs	r0, #14
 800264e:	183b      	adds	r3, r7, r0
 8002650:	210f      	movs	r1, #15
 8002652:	438a      	bics	r2, r1
 8002654:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	b29b      	uxth	r3, r3
 800265c:	2207      	movs	r2, #7
 800265e:	4013      	ands	r3, r2
 8002660:	b299      	uxth	r1, r3
 8002662:	183b      	adds	r3, r7, r0
 8002664:	183a      	adds	r2, r7, r0
 8002666:	8812      	ldrh	r2, [r2, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	183a      	adds	r2, r7, r0
 8002672:	8812      	ldrh	r2, [r2, #0]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	e04c      	b.n	8002712 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002678:	231e      	movs	r3, #30
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e047      	b.n	8002712 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002682:	231f      	movs	r3, #31
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d015      	beq.n	80026b8 <UART_SetConfig+0x1f0>
 800268c:	dc18      	bgt.n	80026c0 <UART_SetConfig+0x1f8>
 800268e:	2b04      	cmp	r3, #4
 8002690:	d00d      	beq.n	80026ae <UART_SetConfig+0x1e6>
 8002692:	dc15      	bgt.n	80026c0 <UART_SetConfig+0x1f8>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <UART_SetConfig+0x1d6>
 8002698:	2b02      	cmp	r3, #2
 800269a:	d005      	beq.n	80026a8 <UART_SetConfig+0x1e0>
 800269c:	e010      	b.n	80026c0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800269e:	f7ff fbc7 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80026a2:	0003      	movs	r3, r0
 80026a4:	61bb      	str	r3, [r7, #24]
        break;
 80026a6:	e012      	b.n	80026ce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026a8:	4b26      	ldr	r3, [pc, #152]	; (8002744 <UART_SetConfig+0x27c>)
 80026aa:	61bb      	str	r3, [r7, #24]
        break;
 80026ac:	e00f      	b.n	80026ce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ae:	f7ff fb51 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 80026b2:	0003      	movs	r3, r0
 80026b4:	61bb      	str	r3, [r7, #24]
        break;
 80026b6:	e00a      	b.n	80026ce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	61bb      	str	r3, [r7, #24]
        break;
 80026be:	e006      	b.n	80026ce <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026c4:	231e      	movs	r3, #30
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
        break;
 80026cc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01e      	beq.n	8002712 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	085a      	lsrs	r2, r3, #1
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	18d2      	adds	r2, r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0019      	movs	r1, r3
 80026e4:	0010      	movs	r0, r2
 80026e6:	f7fd fd0f 	bl	8000108 <__udivsi3>
 80026ea:	0003      	movs	r3, r0
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	d909      	bls.n	800270a <UART_SetConfig+0x242>
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	025b      	lsls	r3, r3, #9
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d204      	bcs.n	800270a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	e003      	b.n	8002712 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800270a:	231e      	movs	r3, #30
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800271e:	231e      	movs	r3, #30
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	781b      	ldrb	r3, [r3, #0]
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b008      	add	sp, #32
 800272a:	bd80      	pop	{r7, pc}
 800272c:	ffff69f3 	.word	0xffff69f3
 8002730:	ffffcfff 	.word	0xffffcfff
 8002734:	fffff4ff 	.word	0xfffff4ff
 8002738:	40013800 	.word	0x40013800
 800273c:	40021000 	.word	0x40021000
 8002740:	40004400 	.word	0x40004400
 8002744:	007a1200 	.word	0x007a1200

08002748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2201      	movs	r2, #1
 8002756:	4013      	ands	r3, r2
 8002758:	d00b      	beq.n	8002772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a4a      	ldr	r2, [pc, #296]	; (800288c <UART_AdvFeatureConfig+0x144>)
 8002762:	4013      	ands	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2202      	movs	r2, #2
 8002778:	4013      	ands	r3, r2
 800277a:	d00b      	beq.n	8002794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a43      	ldr	r2, [pc, #268]	; (8002890 <UART_AdvFeatureConfig+0x148>)
 8002784:	4013      	ands	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2204      	movs	r2, #4
 800279a:	4013      	ands	r3, r2
 800279c:	d00b      	beq.n	80027b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a3b      	ldr	r2, [pc, #236]	; (8002894 <UART_AdvFeatureConfig+0x14c>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	2208      	movs	r2, #8
 80027bc:	4013      	ands	r3, r2
 80027be:	d00b      	beq.n	80027d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a34      	ldr	r2, [pc, #208]	; (8002898 <UART_AdvFeatureConfig+0x150>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	0019      	movs	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	2210      	movs	r2, #16
 80027de:	4013      	ands	r3, r2
 80027e0:	d00b      	beq.n	80027fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a2c      	ldr	r2, [pc, #176]	; (800289c <UART_AdvFeatureConfig+0x154>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	2220      	movs	r2, #32
 8002800:	4013      	ands	r3, r2
 8002802:	d00b      	beq.n	800281c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	4a25      	ldr	r2, [pc, #148]	; (80028a0 <UART_AdvFeatureConfig+0x158>)
 800280c:	4013      	ands	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2240      	movs	r2, #64	; 0x40
 8002822:	4013      	ands	r3, r2
 8002824:	d01d      	beq.n	8002862 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <UART_AdvFeatureConfig+0x15c>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	035b      	lsls	r3, r3, #13
 8002846:	429a      	cmp	r2, r3
 8002848:	d10b      	bne.n	8002862 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <UART_AdvFeatureConfig+0x160>)
 8002852:	4013      	ands	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	4013      	ands	r3, r2
 800286a:	d00b      	beq.n	8002884 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <UART_AdvFeatureConfig+0x164>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
  }
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b002      	add	sp, #8
 800288a:	bd80      	pop	{r7, pc}
 800288c:	fffdffff 	.word	0xfffdffff
 8002890:	fffeffff 	.word	0xfffeffff
 8002894:	fffbffff 	.word	0xfffbffff
 8002898:	ffff7fff 	.word	0xffff7fff
 800289c:	ffffefff 	.word	0xffffefff
 80028a0:	ffffdfff 	.word	0xffffdfff
 80028a4:	ffefffff 	.word	0xffefffff
 80028a8:	ff9fffff 	.word	0xff9fffff
 80028ac:	fff7ffff 	.word	0xfff7ffff

080028b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2280      	movs	r2, #128	; 0x80
 80028bc:	2100      	movs	r1, #0
 80028be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028c0:	f7fe f886 	bl	80009d0 <HAL_GetTick>
 80028c4:	0003      	movs	r3, r0
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2208      	movs	r2, #8
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d10c      	bne.n	80028f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0391      	lsls	r1, r2, #14
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4a17      	ldr	r2, [pc, #92]	; (800293c <UART_CheckIdleState+0x8c>)
 80028e0:	9200      	str	r2, [sp, #0]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f000 f82c 	bl	8002940 <UART_WaitOnFlagUntilTimeout>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e021      	b.n	8002934 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2204      	movs	r2, #4
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d10c      	bne.n	8002918 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	03d1      	lsls	r1, r2, #15
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4a0d      	ldr	r2, [pc, #52]	; (800293c <UART_CheckIdleState+0x8c>)
 8002908:	9200      	str	r2, [sp, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	f000 f818 	bl	8002940 <UART_WaitOnFlagUntilTimeout>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e00d      	b.n	8002934 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2274      	movs	r2, #116	; 0x74
 800292e:	2100      	movs	r1, #0
 8002930:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b004      	add	sp, #16
 800293a:	bd80      	pop	{r7, pc}
 800293c:	01ffffff 	.word	0x01ffffff

08002940 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b094      	sub	sp, #80	; 0x50
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	1dfb      	adds	r3, r7, #7
 800294e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002950:	e0a3      	b.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002954:	3301      	adds	r3, #1
 8002956:	d100      	bne.n	800295a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002958:	e09f      	b.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295a:	f7fe f839 	bl	80009d0 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002966:	429a      	cmp	r2, r3
 8002968:	d302      	bcc.n	8002970 <UART_WaitOnFlagUntilTimeout+0x30>
 800296a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800296c:	2b00      	cmp	r3, #0
 800296e:	d13d      	bne.n	80029ec <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002970:	f3ef 8310 	mrs	r3, PRIMASK
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002978:	647b      	str	r3, [r7, #68]	; 0x44
 800297a:	2301      	movs	r3, #1
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	f383 8810 	msr	PRIMASK, r3
}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	494c      	ldr	r1, [pc, #304]	; (8002ac4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002992:	400a      	ands	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	f383 8810 	msr	PRIMASK, r3
}
 80029a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a2:	f3ef 8310 	mrs	r3, PRIMASK
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80029a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029aa:	643b      	str	r3, [r7, #64]	; 0x40
 80029ac:	2301      	movs	r3, #1
 80029ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b2:	f383 8810 	msr	PRIMASK, r3
}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	438a      	bics	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ce:	f383 8810 	msr	PRIMASK, r3
}
 80029d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2274      	movs	r2, #116	; 0x74
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e067      	b.n	8002abc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2204      	movs	r2, #4
 80029f4:	4013      	ands	r3, r2
 80029f6:	d050      	beq.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	401a      	ands	r2, r3
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d146      	bne.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a16:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1a:	613b      	str	r3, [r7, #16]
  return(result);
 8002a1c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a20:	2301      	movs	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f383 8810 	msr	PRIMASK, r3
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4923      	ldr	r1, [pc, #140]	; (8002ac4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f383 8810 	msr	PRIMASK, r3
}
 8002a46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a48:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a4e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a52:	2301      	movs	r3, #1
 8002a54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f383 8810 	msr	PRIMASK, r3
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	f383 8810 	msr	PRIMASK, r3
}
 8002a78:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	2120      	movs	r1, #32
 8002a8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2274      	movs	r2, #116	; 0x74
 8002a92:	2100      	movs	r1, #0
 8002a94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e010      	b.n	8002abc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	425a      	negs	r2, r3
 8002aaa:	4153      	adcs	r3, r2
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	001a      	movs	r2, r3
 8002ab0:	1dfb      	adds	r3, r7, #7
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d100      	bne.n	8002aba <UART_WaitOnFlagUntilTimeout+0x17a>
 8002ab8:	e74b      	b.n	8002952 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b014      	add	sp, #80	; 0x50
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	fffffe5f 	.word	0xfffffe5f

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	2600      	movs	r6, #0
 8002acc:	4d0c      	ldr	r5, [pc, #48]	; (8002b00 <__libc_init_array+0x38>)
 8002ace:	4c0d      	ldr	r4, [pc, #52]	; (8002b04 <__libc_init_array+0x3c>)
 8002ad0:	1b64      	subs	r4, r4, r5
 8002ad2:	10a4      	asrs	r4, r4, #2
 8002ad4:	42a6      	cmp	r6, r4
 8002ad6:	d109      	bne.n	8002aec <__libc_init_array+0x24>
 8002ad8:	2600      	movs	r6, #0
 8002ada:	f000 f821 	bl	8002b20 <_init>
 8002ade:	4d0a      	ldr	r5, [pc, #40]	; (8002b08 <__libc_init_array+0x40>)
 8002ae0:	4c0a      	ldr	r4, [pc, #40]	; (8002b0c <__libc_init_array+0x44>)
 8002ae2:	1b64      	subs	r4, r4, r5
 8002ae4:	10a4      	asrs	r4, r4, #2
 8002ae6:	42a6      	cmp	r6, r4
 8002ae8:	d105      	bne.n	8002af6 <__libc_init_array+0x2e>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	00b3      	lsls	r3, r6, #2
 8002aee:	58eb      	ldr	r3, [r5, r3]
 8002af0:	4798      	blx	r3
 8002af2:	3601      	adds	r6, #1
 8002af4:	e7ee      	b.n	8002ad4 <__libc_init_array+0xc>
 8002af6:	00b3      	lsls	r3, r6, #2
 8002af8:	58eb      	ldr	r3, [r5, r3]
 8002afa:	4798      	blx	r3
 8002afc:	3601      	adds	r6, #1
 8002afe:	e7f2      	b.n	8002ae6 <__libc_init_array+0x1e>
 8002b00:	08002b70 	.word	0x08002b70
 8002b04:	08002b70 	.word	0x08002b70
 8002b08:	08002b70 	.word	0x08002b70
 8002b0c:	08002b74 	.word	0x08002b74

08002b10 <memset>:
 8002b10:	0003      	movs	r3, r0
 8002b12:	1882      	adds	r2, r0, r2
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d100      	bne.n	8002b1a <memset+0xa>
 8002b18:	4770      	bx	lr
 8002b1a:	7019      	strb	r1, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	e7f9      	b.n	8002b14 <memset+0x4>

08002b20 <_init>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr

08002b2c <_fini>:
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b32:	bc08      	pop	{r3}
 8002b34:	469e      	mov	lr, r3
 8002b36:	4770      	bx	lr
